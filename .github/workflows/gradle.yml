name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: Make application.properties
        run: touch ./src/main/resources/application.properties
      
      - name: Deliver application.properties
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test
      
      # 빌드 결과물을 다음 job에서 사용할 수 있도록 업로드
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/*.jar

  docker-deploy:
    runs-on: ubuntu-latest
    needs: build  # build job 완료 후 실행
    
    steps:
      - uses: actions/checkout@v4
      
      # 이전 job에서 빌드된 결과물 다운로드
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/
      
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: menten4859/timo-repo:latest
          platforms: |
            linux/amd64
            linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create docker-compose.yml
        run: |
          echo "${{ secrets.DOCKER_COMPOSE }}" > docker-compose.yml
      
      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/"
          overwrite: true
      
      - name: Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM }}
          port: 22
          script: |
            cd /home/ubuntu/compose
            /usr/bin/docker compose stop spring
            /usr/bin/docker compose pull spring
            /usr/bin/docker compose up -d spring

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Make application.properties
        run: touch ./src/main/resources/application.properties

      - name: Deliver application.properties
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2            

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: menten4859/timo-repo:latest
          platforms: |
            linux/amd64
            linux/arm64

      # docker-compose 파일들은 이미 메인 브랜치에 커밋되어 있다고 가정
      - name: List docker-compose files in repository
        run: |
          ls -l docker-compose.blue.yml docker-compose.green.yml
          echo "=== docker-compose.blue.yml ==="
          cat docker-compose.blue.yml
          echo "=== docker-compose.green.yml ==="
          cat docker-compose.green.yml

      # docker-compose 파일 개별 업로드
      - name: Upload docker-compose.blue.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM }}
          source: "docker-compose.blue.yml"
          target: "/home/ubuntu/"
          overwrite: true

      - name: Upload docker-compose.green.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM }}
          source: "docker-compose.green.yml"
          target: "/home/ubuntu/"
          overwrite: true

      # deploy.sh 파일도 메인 브랜치에 커밋되어 있다고 가정
      - name: Upload deploy.sh to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM }}
          source: "./deploy.sh"
          target: "/home/ubuntu/"
          overwrite: true

      # deploy.sh 실행
      - name: Execute deploy.sh script remotely
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM }}
          port: 22
          script: |
            chmod +x /home/ubuntu/deploy.sh
            /home/ubuntu/deploy.sh

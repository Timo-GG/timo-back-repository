name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Make application.properties
        run: touch ./src/main/resources/application.properties

      - name: Deliver application.properties
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2            

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: menten4859/timo-repo:latest
          platforms: |
            linux/amd64
            linux/arm64
      
      # -- 여기서 docker-compose.yml을 GitHub Actions에서 생성해 환경 변수로 EC2에 전달 --
      - name: Create docker-compose file
        run: |
          echo "${{ secrets.DOCKER_COMPOSE_SPRINGBOOT }}" > ./docker-compose.yml
      
      - name: Remove old compose folder on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM }}
          script: |
            echo "Removing old /home/ubuntu/compose folder..."
            rm -rf /home/ubuntu/compose
            mkdir -p /home/ubuntu/compose
      
      - name: Upload docker-compose file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM }}
          source: "./docker-compose.yml"
          target: "/home/ubuntu/compose"
          overwrite: true

      - name: Deploy Green version and switch Nginx
        uses: appleboy/ssh-action@master
        env:
          COMPOSE: "/home/ubuntu/compose/docker-compose.yml"
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM }}
          port: 22
          # tty: false  # <- appleboy/ssh-action에서는 tty 입력을 지원하지 않으므로 제거
          envs: COMPOSE
          script: |
            # 도커 로그인
            sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            
            # Green 서비스에 최신 이미지를 pull하고 실행
            sudo docker-compose -f $COMPOSE pull spring-green
            sudo docker-compose -f $COMPOSE up -d spring-green
            
            # Green 서비스 헬스체크 (최대 10회, 5초 간격)
            HEALTH_STATUS=0
            for i in {1..10}; do
              HEALTH_STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8081/actuator/health)
              if [ "$HEALTH_STATUS" -eq 200 ]; then
                echo "Green 서비스 헬스체크 성공 (HTTP $HEALTH_STATUS)"
                break
              else
                echo "Green 서비스 헬스체크 실패 (HTTP $HEALTH_STATUS), 재시도 중..."
                sleep 5
              fi
            done
            
            if [ "$HEALTH_STATUS" -ne 200 ]; then
              echo "Green 서비스 헬스체크 실패. 배포를 중단합니다."
              exit 1
            fi
            
            # Nginx 설정 전환: 이미 서버에 /etc/nginx/conf.d/timo-api-green.conf가 존재한다고 가정
            # => 이를 /etc/nginx/conf.d/timo-api.conf 로 복사하여 Green으로 트래픽 전환
            sudo cp /etc/nginx/conf.d/timo-api-green.conf /etc/nginx/conf.d/timo-api.conf
            sudo nginx -t && sudo systemctl reload nginx
            
            # 전환 완료 후, Blue 서비스를 중지
            sudo docker-compose -f $COMPOSE stop spring-blue
